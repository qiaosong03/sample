// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SimpleMathServiceClient is the client API for SimpleMathService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleMathServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Subtract(ctx context.Context, in *SubtractRequest, opts ...grpc.CallOption) (*SubtractResponse, error)
	Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*MultiplyResponse, error)
	Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*DivideResponse, error)
	ServerStream(ctx context.Context, in *SquareRequest, opts ...grpc.CallOption) (SimpleMathService_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (SimpleMathService_ClientStreamClient, error)
	DoubleStream(ctx context.Context, opts ...grpc.CallOption) (SimpleMathService_DoubleStreamClient, error)
}

type simpleMathServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleMathServiceClient(cc grpc.ClientConnInterface) SimpleMathServiceClient {
	return &simpleMathServiceClient{cc}
}

func (c *simpleMathServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/simpleMath.SimpleMathService/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMathServiceClient) Subtract(ctx context.Context, in *SubtractRequest, opts ...grpc.CallOption) (*SubtractResponse, error) {
	out := new(SubtractResponse)
	err := c.cc.Invoke(ctx, "/simpleMath.SimpleMathService/subtract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMathServiceClient) Multiply(ctx context.Context, in *MultiplyRequest, opts ...grpc.CallOption) (*MultiplyResponse, error) {
	out := new(MultiplyResponse)
	err := c.cc.Invoke(ctx, "/simpleMath.SimpleMathService/multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMathServiceClient) Divide(ctx context.Context, in *DivideRequest, opts ...grpc.CallOption) (*DivideResponse, error) {
	out := new(DivideResponse)
	err := c.cc.Invoke(ctx, "/simpleMath.SimpleMathService/divide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMathServiceClient) ServerStream(ctx context.Context, in *SquareRequest, opts ...grpc.CallOption) (SimpleMathService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleMathService_serviceDesc.Streams[0], "/simpleMath.SimpleMathService/serverStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleMathServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimpleMathService_ServerStreamClient interface {
	Recv() (*SquareResponse, error)
	grpc.ClientStream
}

type simpleMathServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *simpleMathServiceServerStreamClient) Recv() (*SquareResponse, error) {
	m := new(SquareResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleMathServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (SimpleMathService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleMathService_serviceDesc.Streams[1], "/simpleMath.SimpleMathService/clientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleMathServiceClientStreamClient{stream}
	return x, nil
}

type SimpleMathService_ClientStreamClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type simpleMathServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *simpleMathServiceClientStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleMathServiceClientStreamClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleMathServiceClient) DoubleStream(ctx context.Context, opts ...grpc.CallOption) (SimpleMathService_DoubleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleMathService_serviceDesc.Streams[2], "/simpleMath.SimpleMathService/doubleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleMathServiceDoubleStreamClient{stream}
	return x, nil
}

type SimpleMathService_DoubleStreamClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type simpleMathServiceDoubleStreamClient struct {
	grpc.ClientStream
}

func (x *simpleMathServiceDoubleStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleMathServiceDoubleStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleMathServiceServer is the server API for SimpleMathService service.
// All implementations must embed UnimplementedSimpleMathServiceServer
// for forward compatibility
type SimpleMathServiceServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Subtract(context.Context, *SubtractRequest) (*SubtractResponse, error)
	Multiply(context.Context, *MultiplyRequest) (*MultiplyResponse, error)
	Divide(context.Context, *DivideRequest) (*DivideResponse, error)
	ServerStream(*SquareRequest, SimpleMathService_ServerStreamServer) error
	ClientStream(SimpleMathService_ClientStreamServer) error
	DoubleStream(SimpleMathService_DoubleStreamServer) error
	mustEmbedUnimplementedSimpleMathServiceServer()
}

// UnimplementedSimpleMathServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleMathServiceServer struct {
}

func (UnimplementedSimpleMathServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedSimpleMathServiceServer) Subtract(context.Context, *SubtractRequest) (*SubtractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtract not implemented")
}
func (UnimplementedSimpleMathServiceServer) Multiply(context.Context, *MultiplyRequest) (*MultiplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedSimpleMathServiceServer) Divide(context.Context, *DivideRequest) (*DivideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}
func (UnimplementedSimpleMathServiceServer) ServerStream(*SquareRequest, SimpleMathService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedSimpleMathServiceServer) ClientStream(SimpleMathService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedSimpleMathServiceServer) DoubleStream(SimpleMathService_DoubleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoubleStream not implemented")
}
func (UnimplementedSimpleMathServiceServer) mustEmbedUnimplementedSimpleMathServiceServer() {}

// UnsafeSimpleMathServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleMathServiceServer will
// result in compilation errors.
type UnsafeSimpleMathServiceServer interface {
	mustEmbedUnimplementedSimpleMathServiceServer()
}

func RegisterSimpleMathServiceServer(s grpc.ServiceRegistrar, srv SimpleMathServiceServer) {
	s.RegisterService(&_SimpleMathService_serviceDesc, srv)
}

func _SimpleMathService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMathServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpleMath.SimpleMathService/add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMathServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMathService_Subtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMathServiceServer).Subtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpleMath.SimpleMathService/subtract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMathServiceServer).Subtract(ctx, req.(*SubtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMathService_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMathServiceServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpleMath.SimpleMathService/multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMathServiceServer).Multiply(ctx, req.(*MultiplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMathService_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMathServiceServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simpleMath.SimpleMathService/divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMathServiceServer).Divide(ctx, req.(*DivideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMathService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SquareRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimpleMathServiceServer).ServerStream(m, &simpleMathServiceServerStreamServer{stream})
}

type SimpleMathService_ServerStreamServer interface {
	Send(*SquareResponse) error
	grpc.ServerStream
}

type simpleMathServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *simpleMathServiceServerStreamServer) Send(m *SquareResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SimpleMathService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleMathServiceServer).ClientStream(&simpleMathServiceClientStreamServer{stream})
}

type SimpleMathService_ClientStreamServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type simpleMathServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *simpleMathServiceClientStreamServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleMathServiceClientStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SimpleMathService_DoubleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleMathServiceServer).DoubleStream(&simpleMathServiceDoubleStreamServer{stream})
}

type SimpleMathService_DoubleStreamServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type simpleMathServiceDoubleStreamServer struct {
	grpc.ServerStream
}

func (x *simpleMathServiceDoubleStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleMathServiceDoubleStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SimpleMathService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "simpleMath.SimpleMathService",
	HandlerType: (*SimpleMathServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _SimpleMathService_Add_Handler,
		},
		{
			MethodName: "subtract",
			Handler:    _SimpleMathService_Subtract_Handler,
		},
		{
			MethodName: "multiply",
			Handler:    _SimpleMathService_Multiply_Handler,
		},
		{
			MethodName: "divide",
			Handler:    _SimpleMathService_Divide_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "serverStream",
			Handler:       _SimpleMathService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "clientStream",
			Handler:       _SimpleMathService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "doubleStream",
			Handler:       _SimpleMathService_DoubleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "simpleMath.proto",
}
